<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>石建文</title>
  
  <subtitle>Show you the code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shijianwen.github.io/"/>
  <updated>2018-04-04T07:37:08.850Z</updated>
  <id>http://shijianwen.github.io/</id>
  
  <author>
    <name>Lowenshi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter 初探</title>
    <link href="http://shijianwen.github.io/2018/04/02/flutter/"/>
    <id>http://shijianwen.github.io/2018/04/02/flutter/</id>
    <published>2018-04-01T16:48:10.000Z</published>
    <updated>2018-04-04T07:37:08.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对应用开发来说，跨平台是一个永恒的话题，无数工程师们在不断地探索技术的边界，使业界涌现了一批又一批优秀的跨平台开发框架，Flutter 就是其中的一员。本文旨在介绍 Flutter 的初阶使用，如果大家有兴趣，后面会陆续输出一些深入的文章。</p></blockquote><h2 id="什么是Flutter"><a href="#什么是Flutter" class="headerlink" title="什么是Flutter"></a>什么是Flutter</h2><p>Flutter 是由 Google 开源的一个全新的跨平台开发框架，致力于让开发者可以通过它在 iOS 和 Android 两个平台开发原生应用，同时能够在跨平台的基础上较好地保证应用的性能和质量。</p><blockquote><p>Flutter 官网：<a href="http://flutter.io" target="_blank" rel="noopener">http://flutter.io</a></p></blockquote><h2 id="Flutter的特点"><a href="#Flutter的特点" class="headerlink" title="Flutter的特点"></a>Flutter的特点</h2><a id="more"></a><p>先以前端工程师熟悉的 RN 举例，RN 是典型的通过驱动原生 UI 组件进行开发的跨平台框架，得益于 React 本身的 VDOM 设定，使得在 RN 中，上层的 DSL 只需关注如何使用 VDOM 去描述 UI 界面，然后由不同平台的 renderer 进行 VDOM 的绘制来达到跨平台的目的。一个简单的架构图如下：<br><img src="http://7xawh4.com1.z0.glb.clouddn.com/1609086-88b683f05674b315.jpeg" alt="1609086-88b683f05674b315"><br>上图 VDOM 和 renderer 之间，通过一层 bridge 通信来交换 UI 信息和对应的事件信息，可以看出这种跨平台的方式有它天然的瓶颈，那就是 js 和 native 之间通信的成本和性能消耗，特别是在一些动画和富交互的场景中，想要达到流畅的标准（60fps），很容易会碰到性能问题，在低端机器上的表现更是不忍直视（这个问题业界也有一些优化方案，阿里给 weex 出过一个 BindingX 的解决方案，里面的 express-binding 专门为了解决这个问题，但是感觉舍弃了一些灵活性和控制性，具体不展开了）。</p><p>再说回 Flutter，相比于 RN，Flutter 可以说完全是另外一种风格，这里捡几个重要的点说下。首先，为了避免使用 bridge 通信导致出现明显的性能瓶颈，Flutter 使用 Dart 语言编译成了不同平台的原生代码，直接与平台通信，并且原生代码也让应用的性能更加出色；另外在 UI 上 Flutter 也做了突破，它不再依赖原生的 UI 组件，所有组件都由 Flutter 在框架层面上提供，并且支持各种拓展和定制，然后由 Flutter Engine 绘制在真实的画布上，这个过程只需要平台提供 canvas 能力即可，同时因为 UI 完全可控，使得 Flutter 有更好的兼容性。</p><p><img src="http://7xawh4.com1.z0.glb.clouddn.com/15225939129608.jpg" alt=""></p><p>（上图除了底层的 Flutter Engine，其他都是可以由开发者自由定制）<br>说完了 Flutter 的亮点，再说说一个令人担忧的点，那就是应用的动态性。目前来看，Flutter 应用因为是编译出来的，不能像 RN 那样动态加载 js 文件然后执行。不过跨平台跟动态化本身就是两件事情，Flutter 目前也才 beta，未来发展如何也未可知。</p><h2 id="如何入门"><a href="#如何入门" class="headerlink" title="如何入门"></a>如何入门</h2><ul><li>安装 flutter</li></ul><p><code>git clone -b beta https://github.com/flutter/flutter.git</code></p><ul><li>配置开发环境</li></ul><p>可以通过 flutter doctor 命令检查当前开发环境配置，并按照提示安装即可，Flutter 可以在 Android Studio 、 Xcode 和 VSCode 里面搭配 Flutter 插件跑，也可以用编辑器 + Shell 跑，IDE 配置详见：<a href="https://flutter.io/get-started/editor/" target="_blank" rel="noopener">https://flutter.io/get-started/editor/</a><br><img src="http://7xawh4.com1.z0.glb.clouddn.com/15219789336660.jpg" alt=""></p><p><img src="http://7xawh4.com1.z0.glb.clouddn.com/15219817737408.jpg" alt=""></p><ul><li>初始化项目</li></ul><p>终端执行 <code>flutter create myapp</code> 命令或者 IDE 里面新建 Flutter 项目，然后终端执行 <code>flutter run</code> 或者 IDE 里启动调试即可预览 Flutter 应用<br><img src="http://7xawh4.com1.z0.glb.clouddn.com/15225969203941.jpg" alt=""><br>更多入门细节请移步 <a href="https://flutter.io/get-started/install/" target="_blank" rel="noopener">https://flutter.io/get-started/install/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对应用开发来说，跨平台是一个永恒的话题，无数工程师们在不断地探索技术的边界，使业界涌现了一批又一批优秀的跨平台开发框架，Flutter 就是其中的一员。本文旨在介绍 Flutter 的初阶使用，如果大家有兴趣，后面会陆续输出一些深入的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是Flutter&quot;&gt;&lt;a href=&quot;#什么是Flutter&quot; class=&quot;headerlink&quot; title=&quot;什么是Flutter&quot;&gt;&lt;/a&gt;什么是Flutter&lt;/h2&gt;&lt;p&gt;Flutter 是由 Google 开源的一个全新的跨平台开发框架，致力于让开发者可以通过它在 iOS 和 Android 两个平台开发原生应用，同时能够在跨平台的基础上较好地保证应用的性能和质量。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flutter 官网：&lt;a href=&quot;http://flutter.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://flutter.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Flutter的特点&quot;&gt;&lt;a href=&quot;#Flutter的特点&quot; class=&quot;headerlink&quot; title=&quot;Flutter的特点&quot;&gt;&lt;/a&gt;Flutter的特点&lt;/h2&gt;
    
    </summary>
    
      <category term="移动开发" scheme="http://shijianwen.github.io/categories/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>centos 7 配置 lnmp 环境</title>
    <link href="http://shijianwen.github.io/2017/11/15/centos%207%20%E9%85%8D%E7%BD%AE%20lnmp%20%E7%8E%AF%E5%A2%83/"/>
    <id>http://shijianwen.github.io/2017/11/15/centos 7 配置 lnmp 环境/</id>
    <published>2017-11-14T16:00:00.000Z</published>
    <updated>2018-04-04T02:48:19.308Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近折腾 vps 的迁移，各种环境要重新部署，查各种文档让人头疼，年久失修的文档真是害人不浅，于是折腾好环境之后将各个有效的文档做一遍整合，看看 CentOS 7 64 位环境下怎样搭建 LNMP 环境</p></blockquote><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><h4 id="1-gcc"><a href="#1-gcc" class="headerlink" title="1. gcc"></a>1. gcc</h4><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：</p><a id="more"></a><p><code>yum install gcc-c++</code></p><h4 id="2-PCRE-pcre-devel"><a href="#2-PCRE-pcre-devel" class="headerlink" title="2. PCRE pcre-devel"></a>2. PCRE pcre-devel</h4><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：<br><code>yum install -y pcre pcre-devel</code></p><h4 id="3-zlib"><a href="#3-zlib" class="headerlink" title="3. zlib"></a>3. zlib</h4><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。</p><p><code>yum install -y zlib zlib-devel</code></p><h4 id="4-OpenSSL"><a href="#4-OpenSSL" class="headerlink" title="4. OpenSSL"></a>4. OpenSSL</h4><p>OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。<br>nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。</p><p><code>yum install -y openssl openssl-devel</code></p><h3 id="下载-nginx-包"><a href="#下载-nginx-包" class="headerlink" title="下载 nginx 包"></a>下载 nginx 包</h3><p>在 <a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">https://nginx.org/en/download.html</a> 手动下载安装包或者使用 wget 命令获取对应版本的安装包：<br><code>wget -c https://nginx.org/download/nginx-1.10.1.tar.gz</code></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf nginx-1.10.1.tar.gzcd nginx-1.10.1</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>./configure</code></p><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><p><code>make</code><br><code>make install</code></p><p>启动这些不用我写了吧？</p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>附上一个支持 php 的 nginx 配置：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>        <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>   nginx.ninghao.net;</span><br><span class="line">  <span class="attribute">root</span>          html;</span><br><span class="line">  <span class="attribute">index</span>         index.php index.html;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$query_string</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">    <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">    <span class="attribute">include</span> fastcgi.conf;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><p>如果你对 PHP 没有特殊版本要求的话，直接执行以下命令即可，不然还需要小心分辨不同版本</p><h3 id="安装-PHP-1"><a href="#安装-PHP-1" class="headerlink" title="安装 PHP"></a>安装 PHP</h3><p><code>yum install php</code></p><h3 id="安装-PHP-扩展包"><a href="#安装-PHP-扩展包" class="headerlink" title="安装 PHP 扩展包"></a>安装 PHP 扩展包</h3><p><code>yum install php-mysql php-gd libjpeg* php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-bcmath php-mhash libmcrypt</code></p><h3 id="安装-php-fpm"><a href="#安装-php-fpm" class="headerlink" title="安装 php-fpm"></a>安装 php-fpm</h3><p><code>yum install php-fpm</code></p><p>用命令 <code>systemctl start php-fpm</code> 启动 php-fpm，看看现在 9000 端口有没被监听，有的话就可以写个 php 文件试试看了</p><h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h2><p>最简单就是安装 MySQL 啦。</p><p><code>yum install mysql mysql-server</code></p><p>然后设置 root 用户密码，先用 root 身份登录 mysql</p><p><code>mysql -u root</code></p><p>进去后设置密码：</p><p><code>use mysql;</code><br><code>UPDATE user SET Password=PASSWORD(&#39;newpassword&#39;) WHERE user=&#39;root&#39;;</code><br><code>exit;</code></p><p>重启 mysql 服务</p><p><code>sevice mysqld restart</code></p><p>搞定！</p><p>参考文章：</p><p><a href="http://www.linuxidc.com/Linux/2016-09/134907.htm" target="_blank" rel="noopener">CentOS 7 下安装 Nginx</a></p><p><a href="http://www.linuxidc.com/Linux/2014-12/111030.htm" target="_blank" rel="noopener">CentOS 6.5系统安装配置LAMP(Apache+PHP5+MySQL)服务器环境</a></p><p><a href="https://ninghao.net/blog/1368" target="_blank" rel="noopener">在阿里云 CentOS 服务器（ECS）上搭建 nginx + mysql + php-fpm 环境</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近折腾 vps 的迁移，各种环境要重新部署，查各种文档让人头疼，年久失修的文档真是害人不浅，于是折腾好环境之后将各个有效的文档做一遍整合，看看 CentOS 7 64 位环境下怎样搭建 LNMP 环境&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装-Nginx&quot;&gt;&lt;a href=&quot;#安装-Nginx&quot; class=&quot;headerlink&quot; title=&quot;安装 Nginx&quot;&gt;&lt;/a&gt;安装 Nginx&lt;/h2&gt;&lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h3&gt;&lt;h4 id=&quot;1-gcc&quot;&gt;&lt;a href=&quot;#1-gcc&quot; class=&quot;headerlink&quot; title=&quot;1. gcc&quot;&gt;&lt;/a&gt;1. gcc&lt;/h4&gt;&lt;p&gt;安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：&lt;/p&gt;
    
    </summary>
    
      <category term="Web 开发" scheme="http://shijianwen.github.io/categories/Web-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo接入来必力评论系统</title>
    <link href="http://shijianwen.github.io/2017/11/09/hexo%E6%8E%A5%E5%85%A5%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://shijianwen.github.io/2017/11/09/hexo接入来必力评论系统/</id>
    <published>2017-11-08T16:00:00.000Z</published>
    <updated>2018-04-04T02:48:19.309Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我又双叒叕换评论系统了，换评论系统似乎成了一个月经贴 orz 。。。（原来的要是好用我也不至于换啊丢！）</p><p>好了，话不多说，之前用的基于 Github issue 的 Gitment 评论，它的蛋疼之处在于每篇文章都要自己手动初始化，而且有诸多限制。</p><p>再说回这个来必力，可以理解为一个韩国版的多说，多说生前有多好用不用我说了吧？于是怒换之！</p><a id="more"></a><p>换评论系统嘛，老三步，首先去 <a href="http://www.laibili.com.cn/" target="_blank" rel="noopener">官网</a> 注册个账号，然后进管理页面获取代码，这个来必力的后台隐藏地贼深，一般人找不到，这里直接给你链接啦：<a href="http://www.laibili.com.cn/insight" target="_blank" rel="noopener">http://www.laibili.com.cn/insight</a> 进入获取评论代码，丢到你的博客文章的模板页里面去，至于怎么搞，相信聪明的你一定懂~</p><p>这里贴一个写得比我详细比我优雅的文章，具体操作方法可以看这里：<a href="https://zengmianhui.github.io/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/" target="_blank" rel="noopener">https://zengmianhui.github.io/2017/05/02/hexo%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%AF%84%E8%AE%BA%E8%BD%AC%E4%B8%BA%E9%9F%A9%E5%9B%BD%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，我又双叒叕换评论系统了，换评论系统似乎成了一个月经贴 orz 。。。（原来的要是好用我也不至于换啊丢！）&lt;/p&gt;
&lt;p&gt;好了，话不多说，之前用的基于 Github issue 的 Gitment 评论，它的蛋疼之处在于每篇文章都要自己手动初始化，而且有诸多限制。&lt;/p&gt;
&lt;p&gt;再说回这个来必力，可以理解为一个韩国版的多说，多说生前有多好用不用我说了吧？于是怒换之！&lt;/p&gt;
    
    </summary>
    
      <category term="博客日志" scheme="http://shijianwen.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>移动 Web 下 fixed 定位问题</title>
    <link href="http://shijianwen.github.io/2017/09/28/fixed-position-issue/"/>
    <id>http://shijianwen.github.io/2017/09/28/fixed-position-issue/</id>
    <published>2017-09-28T09:56:21.000Z</published>
    <updated>2018-04-04T02:48:19.309Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h2><p>移动 web 下，当父元素使用 translate 或者 rotate 旋转的时候，它的所有子元素的 fixed 定位都不生效（据说连 background-attachment 里面的 fixed 也会失效）</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>浏览器的 bug</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><a id="more"></a><h3 id="1-别用-translate"><a href="#1-别用-translate" class="headerlink" title="1. 别用 translate"></a>1. 别用 translate</h3><p>但一般我们会用 translate 来开启硬件加速，如果为了避免这个问题而舍弃硬件加速似乎有点得不偿失</p><h3 id="2-模拟-fixed"><a href="#2-模拟-fixed" class="headerlink" title="2. 模拟 fixed"></a>2. 模拟 fixed</h3><p>可以花点心思，用 absolute 来模拟 fixed 定位，效果一毛一样的，具体文章就自己搜啦</p><h3 id="3-元素分离"><a href="#3-元素分离" class="headerlink" title="3. 元素分离"></a>3. 元素分离</h3><p>把需要旋转的元素和需要fixed定位的元素分离，不要呈父子关系，可以尝试把旋转下发到各个子元素上</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题表现&quot;&gt;&lt;a href=&quot;#问题表现&quot; class=&quot;headerlink&quot; title=&quot;问题表现&quot;&gt;&lt;/a&gt;问题表现&lt;/h2&gt;&lt;p&gt;移动 web 下，当父元素使用 translate 或者 rotate 旋转的时候，它的所有子元素的 fixed 定位都不生效（据说连 background-attachment 里面的 fixed 也会失效）&lt;/p&gt;
&lt;h2 id=&quot;问题原因&quot;&gt;&lt;a href=&quot;#问题原因&quot; class=&quot;headerlink&quot; title=&quot;问题原因&quot;&gt;&lt;/a&gt;问题原因&lt;/h2&gt;&lt;p&gt;浏览器的 bug&lt;/p&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h2&gt;
    
    </summary>
    
      <category term="Web 开发" scheme="http://shijianwen.github.io/categories/Web-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="bug异闻录" scheme="http://shijianwen.github.io/tags/bug%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用 Gitment 作为评论系统</title>
    <link href="http://shijianwen.github.io/2017/09/12/hexo-gitment/"/>
    <id>http://shijianwen.github.io/2017/09/12/hexo-gitment/</id>
    <published>2017-09-11T16:00:00.000Z</published>
    <updated>2018-04-04T02:48:19.309Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">Gitment</a> 是一个基于 Github issue 的博客评论系统，它的原理是利用 Github 官方提供的 api 操作你某个仓库下的 issue，使用 label 来标记不同的文章，因为是基于 Github issue 的，所以只支持 Github 用户登录，不过无妨。调用 Github api 需要用户提供 Github oAuth 鉴权的 id 和密钥，这个可以在 Github 上申请。在这里必须佩服一下作者的脑洞，接连几家第三方评论系统的停止服务，Gitment 的出现的确解了燃眉之急。我的博客是基于 Hexo 搭建的，所以这里简单讲一下怎样在 hexo 博客里使用 Gitment 作为评论系统。</p><a id="more"></a><h4 id="申请-oAuth-应用"><a href="#申请-oAuth-应用" class="headerlink" title="申请 oAuth 应用"></a>申请 oAuth 应用</h4><p>Gitment 操作 issue 需要进行鉴权，这个鉴权的 id 和密钥要我们自己提供，我们可以在 <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">Github Setting</a> 这里申请新的 oAuth 应用，这里都可以随便填，只要注意把最后的 callback url 填成你的博客的 URL（如 <a href="http://blog.shijianwen.com）。申请完成之后会得到一个" target="_blank" rel="noopener">http://blog.shijianwen.com）。申请完成之后会得到一个</a> client id 和 secret，这就是后面鉴权需要用到的东西。</p><h4 id="接入博客"><a href="#接入博客" class="headerlink" title="接入博客"></a>接入博客</h4><p>在你博客的主题下，找到文章的模板文件（一般叫做 post.xxx），我用的 hexo 主题是 next，我的路径是 <code>themes/next/layout/post.swig</code>，进入模板文件，引入下面这段代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://imsun.github.io/gitment/style/default.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://imsun.github.io/gitment/dist/gitment.browser.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span></span><br><span class="line"><span class="actionscript">  id: <span class="string">'页面 ID'</span>, <span class="comment">// 可选。默认为 location.href</span></span></span><br><span class="line"><span class="actionscript">  owner: <span class="string">'你的 GitHub ID'</span>,</span></span><br><span class="line"><span class="actionscript">  repo: <span class="string">'存储评论的 repo'</span>,</span></span><br><span class="line"><span class="undefined">  oauth: &#123;</span></span><br><span class="line"><span class="actionscript">    client_id: <span class="string">'你的 client ID'</span>,</span></span><br><span class="line"><span class="actionscript">    client_secret: <span class="string">'你的 client secret'</span>,</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="actionscript">gitment.render(<span class="string">'container'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里有几个注意点，如果你跟我一样是 next 主题用户，那么建议你最好把代码引入到 <code>block content</code> 下。另外在 js 代码里，id 最好使用 location.pathname，保证唯一性的情况下还不会被别的干扰（之前用location.href，如果 url 带 hash 会被认为是两篇不同的文章），如果你有更好的标识方法请忽略这条。</p><h4 id="初始化评论"><a href="#初始化评论" class="headerlink" title="初始化评论"></a>初始化评论</h4><p>代码添加完成之后，重新生成并部署到 github，打开你的博客，进入文章页，会看到最下面有一个评论框，此时评论框会提示一个未初始化的错误，这时候你需要在这个页面点击 login，然后点击初始化按钮进行初始化，这也是 Gitment 一个比较繁琐的地方，你需要给每篇文章都初始化一次评论，初始化做的工作就是新建一条当前文章的 issue，之后所有的评论都添加到该 issue 下的评论中去。这里有一个地方需要注意，如果你的文章 url 有些字符被 URL<br> 编码了，比如文章名带了空格等特殊字符，在 url 显示的时候被编码了，这时候登录 github 会报一个 callback url 的错误，提示你当前登录的 url 跟你申请 oAuth 鉴权的时候填的 callback 不一样，但实际上是一样的。所以为了避免这个问题，你的文章的 md 文件名字，最好不要出现空格等特殊字符，一般就用英文加连字符号就行，md 文件的名字只影响你文章 url 的显示，不会影响你真实的文章标题，标题还是以 md 文件里面的 title 字段为准。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/imsun/gitment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gitment&lt;/a&gt; 是一个基于 Github issue 的博客评论系统，它的原理是利用 Github 官方提供的 api 操作你某个仓库下的 issue，使用 label 来标记不同的文章，因为是基于 Github issue 的，所以只支持 Github 用户登录，不过无妨。调用 Github api 需要用户提供 Github oAuth 鉴权的 id 和密钥，这个可以在 Github 上申请。在这里必须佩服一下作者的脑洞，接连几家第三方评论系统的停止服务，Gitment 的出现的确解了燃眉之急。我的博客是基于 Hexo 搭建的，所以这里简单讲一下怎样在 hexo 博客里使用 Gitment 作为评论系统。&lt;/p&gt;
    
    </summary>
    
      <category term="博客日志" scheme="http://shijianwen.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>pyspider 初探</title>
    <link href="http://shijianwen.github.io/2017/09/10/pyspider%E5%88%9D%E6%8E%A2/"/>
    <id>http://shijianwen.github.io/2017/09/10/pyspider初探/</id>
    <published>2017-09-09T16:00:00.000Z</published>
    <updated>2018-04-04T02:48:19.311Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.pyspider.cn/" target="_blank" rel="noopener">pyspider</a> 是一款强大方便的爬虫框架，如果你有一个需要快速实现的爬虫任务，pyspider 是一个不错的选择。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h4><p>我们使用 pip 来安装 pyspider，pip 安装见<a href="http://pip-cn.readthedocs.io/en/latest/installing.html" target="_blank" rel="noopener">这里</a></p><a id="more"></a><h4 id="phantomjs"><a href="#phantomjs" class="headerlink" title="phantomjs"></a>phantomjs</h4><p>爬虫在抓取页面的时候经常会遇到需要模拟浏览器行为的问题，如点击、执行加载等。这些问题在 pyspider 里面都需要靠 phantomjs 去解决。phantomjs 可以理解成是一个没有 UI 界面的浏览器，可以通过代码来完成浏览器的所有行为。安装的命令如下：</p><ul><li>Ubuntu</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install phantomjs</span><br></pre></td></tr></table></figure><ul><li>Mac</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install phantomjs</span><br></pre></td></tr></table></figure><p>依赖安装完成之后我们可以执行 <code>pip install pyspider</code><br>命令安装 pyspider。</p><p>Ubuntu 系统如果报错请确保安装了以下依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python python-dev python-distribute python-pip libcurl4-openssl-dev libxml2-dev libxslt1-dev python-lxml</span><br></pre></td></tr></table></figure><p>Mac 系统安装过程中可能会遇到一个 <code>Operation not permitted</code> 的错误，具体解决方法看 <a href="http://blog.shijianwen.com/2017/03/26/Mac%20%E5%AE%89%E8%A3%85%20Scrapy%20%E6%8A%A5%E9%94%99/" target="_blank" rel="noopener">这里</a></p><p>安装过程没有报错即代表安装成功。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>命令行使用 <code>pyspider all</code>  命令启动 pyspider，参数 all 代表启动所有 pyspider 的插件。启动完成之后会自动打开 pyspider 的 WebUI 界面，我们后面所有的代码编写、调试、结果查看都在这里完成。</p><p><img src="http://7xawh4.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-10%20%E4%B8%8B%E5%8D%888.34.08.png" alt="enter image description here"></p><p>点击 <code>create</code> 新建一个爬虫任务然后进入代码编辑界面</p><p><img src="http://7xawh4.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-09-10%20%E4%B8%8B%E5%8D%888.41.35.png" alt="enter image description here"></p><p>里面有一些预置的代码，分别是：</p><p>crawl_config<br>爬虫配置信息，一些公共配置如请求头等</p><p>@every(minutes=24*60)<br>设置 on_start 方法执行的频率，这里是一天一次</p><p>on_start<br>入口代码</p><p>self.crawl<br>新建一个爬虫任务，丢到等待队列里，callback 参数指定爬虫请求返回后的处理函数</p><p>@config(age=10<em>24</em>60*60)<br>设置请求过期时间，这里表示十天内相同请求将会被忽略</p><p>index_page<br>爬虫请求的响应的处理函数，response 参数是请求的响应，response.doc 是一个类似 jquery 的对象，可以使用 jq 选择器查找文档里的元素</p><p>@config(priority=2)<br>优先级，数字越大优先级越高</p><p>detail_page<br>另一个处理函数，该函数的返回值将会直接存到 pyspider 的结果数据库中去，在爬虫任务面板点击查看结果查看的就是所有任务的 detail_page 函数返回的结果</p><p>以上几个方法是 pyspider 的核心方法，它同时也揭示了爬虫任务的生命周期。利用好这几个方法即可快速完成你的爬虫任务。</p><p>在基于以上几个方法写好爬虫代码之后，可以现在代码编辑调试爬虫代码，点击右上角 save 保存代码，然后在左边绿色区域点击 run 运行爬虫代码，在调试阶段，每次抓取并分析之后（也就是每次执行完 detail_page 之后）都会暂停，供开发者进行分析，点击左侧区域下方的几个按钮，可以看到此时不同的信息。<code>enable css selector helper</code> 可以打开 css 选择器；<code>web</code> 按钮可以展示当前页面的 UI，<code>html</code> 按钮可以展示当前页面的 HTML 结构；<code>follows</code> 按钮可以看到此时等待队列里面的所有待抓取的爬虫请求；<code>message</code>按钮可以显示抓取过程中的信息。当分析完毕需要继续执行爬虫的时候，可以在 <code>follows</code> 队列里面选择一个爬虫任务点击执行，即可进入下一个抓取任务。</p><p>对于一些动态页面的抓取，爬虫无法直接抓取，需要模仿浏览器的动态加载过程，就需要用到刚刚我们装的 phantomjs 了，使用 phantomjs 很简单，只要在使用 crawl 函数的时候增加一个参数 <code>fetch_type=&#39;js&#39;</code> 即可。</p><p>当代码调试完成之后，即可开始运行，点击 <code>save</code> 按钮保存代码，回到 pyspider 的任务列表页，改变任务 status 为 running，点击右侧 run 按钮即可开始执行爬虫代码。progress 里面会实时显示当前爬虫任务的进度，点击右侧 <code>results</code><br> 按钮可以进入结果页面查看当前爬虫的结果（也就是detail_page函数返回的结果）</p><p>到这里一个完整的 pyspider 爬虫过程就结束啦，是不是很方便很强大呢？如果希望对 pyspider 了解更多，可以查看它的<a href="http://www.pyspider.cn/book/pyspider/pyspider-Quickstart-2.html" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.pyspider.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pyspider&lt;/a&gt; 是一款强大方便的爬虫框架，如果你有一个需要快速实现的爬虫任务，pyspider 是一个不错的选择。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;h4 id=&quot;pip&quot;&gt;&lt;a href=&quot;#pip&quot; class=&quot;headerlink&quot; title=&quot;pip&quot;&gt;&lt;/a&gt;pip&lt;/h4&gt;&lt;p&gt;我们使用 pip 来安装 pyspider，pip 安装见&lt;a href=&quot;http://pip-cn.readthedocs.io/en/latest/installing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://shijianwen.github.io/categories/Python/"/>
    
    
      <category term="爬虫" scheme="http://shijianwen.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="http://shijianwen.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>css overflow 问题,</title>
    <link href="http://shijianwen.github.io/2017/09/06/css-overflow-error/"/>
    <id>http://shijianwen.github.io/2017/09/06/css-overflow-error/</id>
    <published>2017-09-06T05:10:00.000Z</published>
    <updated>2018-04-04T02:48:19.308Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h4><hr><p>当给一个容器设置 <code>overflow-x: hidden</code> 同时 <code>overflow-y: visible</code> 时，垂直方向的的设置总是失效。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid gray;</span><br><span class="line">  <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">  <span class="attribute">overflow-y</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// html</span></span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"wrap"</span>&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=<span class="string">"inner"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="http://7xawh4.com1.z0.glb.clouddn.com/1504665163676.png" alt="Alt text"></p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><hr><p>参考 <a href="https://stackoverflow.com/questions/6421966/css-overflow-x-visible-and-overflow-y-hidden-causing-scrollbar-issue" target="_blank" rel="noopener">https://stackoverflow.com/questions/6421966/css-overflow-x-visible-and-overflow-y-hidden-causing-scrollbar-issue</a> 和 w3c 关于 overflow 值的说法 <a href="https://www.w3.org/TR/css3-box/#overflow-x" target="_blank" rel="noopener">https://www.w3.org/TR/css3-box/#overflow-x</a></p><blockquote><p>The computed values of ‘overflow-x’ and ‘overflow-y’ are the same as their specified values, except that some combinations with ‘visible’ are not possible: if one is specified as ‘visible’ and the other is ‘scroll’ or ‘auto’, then ‘visible’ is set to ‘auto’. The computed value of ‘overflow’ is equal to the computed value of ‘overflow-x’ if ‘overflow-y’ is the same; otherwise it is the pair of computed values of ‘overflow-x’ and ‘overflow-y’.</p></blockquote><blockquote><p>overflow-x 和 overflow-y 的计算值跟给定的值相同，除了某些跟 visible 值的不合理组合：如果其中一个属性的值为 visible，而另一个为 scroll 或 auto，那么 visible 会被重置为 auto 。在 overflow-y 与 overflow-x 值相同的情况下，overflow 的计算值取决于 overflow-x；否则就按上面的规则计算</p></blockquote><p>当 overflow-x 和 overflow-y 为不同值的时候，值为 visible 的属性总是会被重置为 auto，这也解释了上面为什么垂直方向有滚动条的问题。</p><p>在解决问题的过程中发现有另一个说法是说跟 BFC 有关，因为 visible 和非 visible 对 BFC 的产生刚好相反，为了不引起歧义于是加了一条这样的规则（这个看看就好）</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><hr><p><strong><em>wrap 包裹</em></strong><br>还是参考 <a href="https://stackoverflow.com/questions/6421966/css-overflow-x-visible-and-overflow-y-hidden-causing-scrollbar-issue" target="_blank" rel="noopener">stackoverflow</a> 的讨论，既然同一个元素里面不能同时设置 overflow-x 和 overflow-y 为对立的值，那么可以加多一个容器，然后分别设置 overflow-x 和 overflow-y</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"> <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="undefined">   height: 400px;</span></span><br><span class="line"><span class="undefined">   width: 200px;</span></span><br><span class="line"><span class="undefined">   border: 4px solid gray;</span></span><br><span class="line"><span class="undefined">   overflow-y: visible;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"> <span class="selector-class">.wrap2</span> &#123;</span></span><br><span class="line"><span class="undefined">   overflow-x: hidden;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="undefined">   height: 500px;</span></span><br><span class="line"><span class="undefined">   width: 300px;</span></span><br><span class="line"><span class="undefined">   background: red;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问题解决。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;问题表现&quot;&gt;&lt;a href=&quot;#问题表现&quot; class=&quot;headerlink&quot; title=&quot;问题表现&quot;&gt;&lt;/a&gt;问题表现&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;当给一个容器设置 &lt;code&gt;overflow-x: hidden&lt;/code&gt; 同时 &lt;code&gt;overflow-y: visible&lt;/code&gt; 时，垂直方向的的设置总是失效。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// css&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.wrap&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;400px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4px&lt;/span&gt; solid gray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow-x&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow-y&lt;/span&gt;: visible;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.inner&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;500px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;wrap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&lt;span class=&quot;string&quot;&gt;&quot;inner&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Web 开发" scheme="http://shijianwen.github.io/categories/Web-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="bug异闻录" scheme="http://shijianwen.github.io/tags/bug%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    
      <category term="问题解决" scheme="http://shijianwen.github.io/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy 启动报错 &#39;module&#39; object has no attribute &#39;OP_NO_TLSv1_1</title>
    <link href="http://shijianwen.github.io/2017/03/26/Scrapy-start-error/"/>
    <id>http://shijianwen.github.io/2017/03/26/Scrapy-start-error/</id>
    <published>2017-03-26T10:48:00.000Z</published>
    <updated>2018-04-04T02:48:19.307Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xiuuj.com1.z0.glb.clouddn.com/wallheven-python.png" alt=""><br>这个问题是因为 Twisted 的版本引起的，具体查看 <a href="https://github.com/scrapy/scrapy/issues/2473" target="_blank" rel="noopener">issue</a>，解决办法是安装指定版本的 Twisted：<code>pip install Twisted==16.4.1</code>，关于 Twisted，是一个 Python 里面的异步编程框架，具体可见 <a href="https://www.gitbook.com/book/likebeta/twisted-intro-cn/details" target="_blank" rel="noopener">文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7xiuuj.com1.z0.glb.clouddn.com/wallheven-python.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这个问题是因为 Twisted 的版本引起的，具体查看 &lt;a href=&quot;https://github.com/
      
    
    </summary>
    
      <category term="Python" scheme="http://shijianwen.github.io/categories/Python/"/>
    
    
      <category term="bug异闻录" scheme="http://shijianwen.github.io/tags/bug%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Mac 上安装 Scrapy 报错，Operation not permitted</title>
    <link href="http://shijianwen.github.io/2017/03/26/mac-scrapy-error/"/>
    <id>http://shijianwen.github.io/2017/03/26/mac-scrapy-error/</id>
    <published>2017-03-26T10:00:00.000Z</published>
    <updated>2018-04-04T02:48:19.310Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xiuuj.com1.z0.glb.clouddn.com/wallhaven-423175.png" alt=""><br>这个问题在 <code>OS X El Capitan</code> 普遍存在，后面会说明原因。</p><p>前几天在 Mac 上安装 Scrapy，按照官方文档的步骤使用 pip 安装 scrapy 后报一个权限错误<br><code>OSError: [Errno 1] Operation not permitted: &#39;/var/folders/6t/h404bjcd5tb_4q86tpv_251rv_0h0j/T/pip-sYsqDS-uninstall/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six-1.4.1-py2.7.egg-info&#39;</code><br>看起来像是一个普通的权限问题，但问题是即使使用 sudo 命令也还是报相同的错误，搜索之后发现是因为 pip 在更新本机 six 模块的时候，没有权限卸载本机旧版本的 six 模块。网上给出的解决办法是加个 ignore 参数，完整命令如下：<br><code>pip install scrapy --ignore-installed six</code>，忽略本机已安装的 six，这样就可以避免没有权限删除的问题了。使用此命令可以正常安装 Scrapy，安装完成之后运行 Scrapy，发现又报一个引用错误 <code>ImportError: cannot import name xmlrpc_client</code>，搜索之后发现解决办法是要手动删除机子上的 six 模块然后重装机。。。（又回到原地了），这时候我们就不可避免地要弄清楚刚刚那个权限错误是怎么回事了。所以又是一顿查，发现 <a href="http://www.macworld.com/article/2986118/security/how-to-modify-system-integrity-protection-in-el-capitan.html" target="_blank" rel="noopener">这里</a> 有说到新版的 Mac 里面新增了一个 SIP（System Integrity Protection 系统完整性保护）机制，即在底层限制 root 用户的某些权限，让即使是 root 用户也无法删除/修改某些系统核心文件，这样即使在系统完全被黑的情况下也能够保证系统的完整性，这也算是整个电脑的最后一重安全保障。我们这里遇到的问题就是跟 SIP 有关，解决办法就是进入 Recovery 模式关闭它。关闭的具体步骤是，重启 Mac，按住 <code>cmd + R</code>，等待进入 Recovery 界面，在 Recovery 界面唤出命令行，执行以下命令然后重启机器即可：<br><code>csrutil disable</code></p><p>重启后就可以正常启动 Scrapy 啦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7xiuuj.com1.z0.glb.clouddn.com/wallhaven-423175.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这个问题在 &lt;code&gt;OS X El Capitan&lt;/code&gt; 普遍存在，后面会说明原因。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="OS X" scheme="http://shijianwen.github.io/categories/OS-X/"/>
    
    
      <category term="bug异闻录" scheme="http://shijianwen.github.io/tags/bug%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>GoodBye Alice</title>
    <link href="http://shijianwen.github.io/2017/03/23/GoodBye-Alice/"/>
    <id>http://shijianwen.github.io/2017/03/23/GoodBye-Alice/</id>
    <published>2017-03-23T01:46:30.000Z</published>
    <updated>2018-04-04T02:48:19.306Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xiuuj.com1.z0.glb.clouddn.com/Resident.png" alt=""></p><p>等啊等终于让我等来了生化终章的无删减版，工作日晚上熬着夜把电影看完，第二天起床后发现都忘记昨晚看的啥了。。。</p><p>明显感觉到影片叙事很匆忙，生硬地把故事收尾。Alice 一行人，连人都没给整明白，就早早领盒饭了。蜂巢里的历险更像是花式陷阱死亡秀，特效也没有特别出彩。整个终章，更像是为了结局而结局。</p><p>幸好克莱尔还是辣么美~HIAHIAHIA</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7xiuuj.com1.z0.glb.clouddn.com/Resident.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;等啊等终于让我等来了生化终章的无删减版，工作日晚上熬着夜把电影看完，第二天起床后发现都忘记昨晚看的啥了。。。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="电影" scheme="http://shijianwen.github.io/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="批判一番" scheme="http://shijianwen.github.io/tags/%E6%89%B9%E5%88%A4%E4%B8%80%E7%95%AA/"/>
    
  </entry>
  
  <entry>
    <title>MySQL5.6 内存占用过高问题</title>
    <link href="http://shijianwen.github.io/2017/03/23/mysql-ram-error/"/>
    <id>http://shijianwen.github.io/2017/03/23/mysql-ram-error/</id>
    <published>2017-03-23T01:46:30.000Z</published>
    <updated>2018-04-04T02:48:19.310Z</updated>
    
    <content type="html"><![CDATA[<p>这几天在给 vps 配 LNMP 环境的时候，安装 mysql 选择的是 5.6 版本，使用的时候经常提示连接数据库失败，使用 mysql 登录的时候一直提示找不都 socket 文件（一个启动后会自动生成的文件），后来发现是整个 mysql 进程都挂掉了，使用 <code>service mysqld restart</code> 重启时也一直无响应，去查看日志，发现启动时发生了一个错误：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> mysqld_safe Number of processes running now: <span class="number">0</span></span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> mysqld_safe mysqld restarted</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> [Note] Plugin 'FEDERATED' is disabled.</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> InnoDB: The InnoDB memory heap is disabled</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> InnoDB: Mutexes <span class="keyword">and</span> rw_locks <span class="keyword">use</span> GCC atomic builtins</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> InnoDB: Compressed tables <span class="keyword">use</span> zlib <span class="number">1</span><span class="variable">.2</span><span class="variable">.3</span></span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> InnoDB: Using Linux native AIO</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> InnoDB: Initializing buffer pool, size = <span class="number">128</span><span class="variable">.0M</span></span><br><span class="line">InnoDB: mmap(<span class="number">137363456</span> bytes) failed; errno <span class="number">12</span></span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> InnoDB: Completed initialization of buffer pool</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> InnoDB: Fatal error: cannot allocate memory <span class="keyword">for</span> the buffer pool</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> [ERROR] Plugin 'InnoDB' init <span class="keyword">function</span> returned error.</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> [ERROR] Plugin 'InnoDB' registration as a STORAGE ENGINE failed.</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> [ERROR] Unknown/unsupported storage engine: InnoDB</span><br><span class="line"><span class="number">140416</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">24</span> [ERROR] Aborting</span><br></pre></td></tr></table></figure><a id="more"></a><p>注意这个：<code>Fatal error: cannot allocate memory for the buffer pool</code>，说明是内存不足了，因为这时候进程已经挂掉了没办法看到内存占用情况，但我从 vps 的统计报表里面能看到当时的内存占用情况：</p><p><img src="http://7xiuuj.com1.z0.glb.clouddn.com/QQ20170323-0.png" alt=""></p><p>差不多 400M 的样子，吓得我赶紧搜了一下，结论是 mysql5.6 相对前代性能有大幅提升，但同时内存占用也是水涨船高，对于个人小站点来说，mysql5.6并不适用，所以如果你对数据库不太挑剔的话，还是建议用旧版本吧。如果你坚持使用5.6版本，那么要么升级你的内存，要么在配置文件里限制 mysql 的资源数，在 <code>/etc/my.cnf</code> 文件里面添加如下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">performance_schema_max_table_instances</span>=<span class="number">400</span>  //检测的表对象的最大数目</span><br><span class="line"><span class="attr">table_definition_cache</span>=<span class="number">400</span>  //能缓存的最大表定义数</span><br><span class="line"><span class="attr">table_open_cache</span>=<span class="number">256</span>  //最多能打开的表数目</span><br></pre></td></tr></table></figure><p>配置完成之后用命令 <code>service mysqld restart</code> 重启 mysql 即可。</p><p>除此之外，<code>innodb_buffer_pool_size</code>，<code>innodb_additional_mem_pool_size</code>，<code>innodb_log_buffer_size</code> 也可以做相应调整，还有 <code>performance_schema</code> 在 vps 里面没什么意义，可以关掉：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">innodb_buffer_pool_size</span> = <span class="number">8</span>M </span><br><span class="line"><span class="attr">innodb_additional_mem_pool_size</span> = <span class="number">1</span>M </span><br><span class="line"><span class="attr">innodb_log_buffer_size</span> = <span class="number">1</span>M</span><br><span class="line"><span class="attr">performance_schema</span> = <span class="literal">OFF</span></span><br></pre></td></tr></table></figure><p>所以。。。为什么不直接换5.5呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天在给 vps 配 LNMP 环境的时候，安装 mysql 选择的是 5.6 版本，使用的时候经常提示连接数据库失败，使用 mysql 登录的时候一直提示找不都 socket 文件（一个启动后会自动生成的文件），后来发现是整个 mysql 进程都挂掉了，使用 &lt;code&gt;service mysqld restart&lt;/code&gt; 重启时也一直无响应，去查看日志，发现启动时发生了一个错误：&lt;/p&gt;
&lt;figure class=&quot;highlight verilog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; mysqld_safe Number of processes running now: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; mysqld_safe mysqld restarted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; [Note] Plugin &#39;FEDERATED&#39; is disabled.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; InnoDB: The InnoDB memory heap is disabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; InnoDB: Mutexes &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; rw_locks &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; GCC atomic builtins&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; InnoDB: Compressed tables &lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; zlib &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; InnoDB: Using Linux native AIO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; InnoDB: Initializing buffer pool, size = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;.0M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;InnoDB: mmap(&lt;span class=&quot;number&quot;&gt;137363456&lt;/span&gt; bytes) failed; errno &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; InnoDB: Completed initialization of buffer pool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; InnoDB: Fatal error: cannot allocate memory &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the buffer pool&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; [ERROR] Plugin &#39;InnoDB&#39; init &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; returned error.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; [ERROR] Plugin &#39;InnoDB&#39; registration as a STORAGE ENGINE failed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; [ERROR] Unknown/unsupported storage engine: InnoDB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;140416&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; [ERROR] Aborting&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://shijianwen.github.io/categories/Linux/"/>
    
    
      <category term="bug异闻录" scheme="http://shijianwen.github.io/tags/bug%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Clipboard.js 在华为手机中的兼容</title>
    <link href="http://shijianwen.github.io/2017/03/22/clipboard-fix/"/>
    <id>http://shijianwen.github.io/2017/03/22/clipboard-fix/</id>
    <published>2017-03-22T10:55:30.000Z</published>
    <updated>2018-04-04T02:48:19.308Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>果然大厂的 bug 都要屌一点</p></blockquote><h2 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h2><p>最近接手一个需求，需要实现一个点击复制的功能，当点击触发按钮后，自动将一段文本复制到剪贴板，本着不（jiu）重（shi）复（yin）造（wei）轮（lan）子的想法，我搜索了一番，发现了广受好评的 <a href="https://clipboardjs.com/" target="_blank" rel="noopener">Clipboard.js</a>。了解一番后发现 Clipboard.js 的原理是利用 DOM 提供的 execCommand 方法来执行 copy 命令，不足的是 execCommand 这个 api 并不是所有浏览器都能用，但幸好针对不兼容的浏览器 Clipboard 能够高亮选中文本并提示用户手动复制，达到降级的目的。开发过程中一切都很正常，但在做适配测试的时候，部分华为手机的表现比较诡异：提示复制成功但此时剪贴板却是空的或者还是上一次手动复制的内容，很明显它根本没有执行复制命令，但却告诉我复制成功了。换用官方给的代码 demo 以及自己用原生 execCommand 实现的代码表现都雷同。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>既然知道原因，问题就好解决了，我采用的办法是新增一个标志位，然后监听目标元素的 copy 事件，只有当 copy 事件真实触发时才改变标志位状态，然后通过判断标志位来决定往后的逻辑，就酱~！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;果然大厂的 bug 都要屌一点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;问题表现&quot;&gt;&lt;a href=&quot;#问题表现&quot; class=&quot;headerlink&quot; title=&quot;问题表现&quot;&gt;&lt;/a&gt;问题表现&lt;/h2&gt;&lt;p&gt;最近接手一个需求，需要实现一个点击复制的功能，当点击触发按钮后，自动将一段文本复制到剪贴板，本着不（jiu）重（shi）复（yin）造（wei）轮（lan）子的想法，我搜索了一番，发现了广受好评的 &lt;a href=&quot;https://clipboardjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Clipboard.js&lt;/a&gt;。了解一番后发现 Clipboard.js 的原理是利用 DOM 提供的 execCommand 方法来执行 copy 命令，不足的是 execCommand 这个 api 并不是所有浏览器都能用，但幸好针对不兼容的浏览器 Clipboard 能够高亮选中文本并提示用户手动复制，达到降级的目的。开发过程中一切都很正常，但在做适配测试的时候，部分华为手机的表现比较诡异：提示复制成功但此时剪贴板却是空的或者还是上一次手动复制的内容，很明显它根本没有执行复制命令，但却告诉我复制成功了。换用官方给的代码 demo 以及自己用原生 execCommand 实现的代码表现都雷同。&lt;/p&gt;
    
    </summary>
    
      <category term="Web 开发" scheme="http://shijianwen.github.io/categories/Web-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="bug异闻录" scheme="http://shijianwen.github.io/tags/bug%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>最近几天的博客变化</title>
    <link href="http://shijianwen.github.io/2017/03/22/%E6%9C%80%E8%BF%91%E5%87%A0%E5%A4%A9%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8F%98%E5%8C%96/"/>
    <id>http://shijianwen.github.io/2017/03/22/最近几天的博客变化/</id>
    <published>2017-03-22T08:50:30.000Z</published>
    <updated>2018-04-04T02:48:19.312Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xiuuj.com1.z0.glb.clouddn.com/wallhaven-317195.jpg" alt=""></p><blockquote><p>使劲折腾哎~</p></blockquote><p>一直都很想在博客里折腾点别的东西，像相册啊代码实验室啊什么的，但我又一直认为博客就是写文字的地方，不该跟其他那些功能混在一起，所以败了一个 VPS 和域名，起了一个 WordPress 小站 <a href="http://shijianwen.com" target="_blank" rel="noopener">http://shijianwen.com</a>，当做个人主站，里面放各种自己想玩的东西，博客还是这个博客，会在主站里面通过链接的形式引导过来，博客的域名也聚合在主站的域名下 <a href="http://blog.shijianwen.com" target="_blank" rel="noopener">http://blog.shijianwen.com</a>，之前那个 <a href="http://shijianwen.cn" target="_blank" rel="noopener">shijianwen.cn</a> 照旧用。</p><p>折腾 VPS 之外，还给博客换了个主题，之前那个太多人用了。。。一种人人都是你友站的感觉。。。</p><p>感觉像做了一次大扫除~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://7xiuuj.com1.z0.glb.clouddn.com/wallhaven-317195.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使劲折腾哎~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一直都很想在博客里折腾
      
    
    </summary>
    
      <category term="博客日志" scheme="http://shijianwen.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>【译】使用箭头函数精简你的 Vue 模块</title>
    <link href="http://shijianwen.github.io/2016/12/05/arrow-function/"/>
    <id>http://shijianwen.github.io/2016/12/05/arrow-function/</id>
    <published>2016-12-05T07:46:10.000Z</published>
    <updated>2018-04-04T02:48:19.308Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://dotdev.co/clean-up-your-vue-modules-with-es6-arrow-functions-2ef65e348d41#.vkndfgci3" target="_blank" rel="noopener">https://dotdev.co/clean-up-your-vue-modules-with-es6-arrow-functions-2ef65e348d41#.vkndfgci3</a><br>众成翻译地址：<a href="http://www.zcfy.cc/article/clean-up-your-vue-modules-with-es6-arrow-functions-dotdev-1872.html" target="_blank" rel="noopener">http://www.zcfy.cc/article/clean-up-your-vue-modules-with-es6-arrow-functions-dotdev-1872.html</a></p></blockquote><p>最近在重构一个用 Vue1.0 写的项目，我通过使用 ES6 的箭头函数来让代码在不升级 Vue2.0 的情况下变得更加简洁和统一。在这个过程中我也遇到了很多坑，所以想借此机会分享一下我从中学到的东西以及总结出来的一些规范，这些规范以后都将会落实到我的 Vue 项目中。</p><a id="more"></a><p>我们最好还是通过代码示例来讲解，下面给出一段代码，我们一步一步来分析它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// require vue-resource...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line"></span><br><span class="line">  data: &#123;</span><br><span class="line">      item: &#123;</span><br><span class="line">        title: <span class="string">''</span>,</span><br><span class="line">        description: <span class="string">''</span>,</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">    saveItem: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.$http.post(<span class="string">'item'</span>, <span class="keyword">this</span>.item)</span><br><span class="line">        .then(</span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            vm.item.title = <span class="string">''</span>;</span><br><span class="line">            vm.item.description = <span class="string">''</span>;</span><br><span class="line">          &#125;, </span><br><span class="line"></span><br><span class="line">          <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'error'</span>, response);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面给出的这段代码实现了一个表单提交逻辑，用户提交表单之后发送请求在数据库新建一个数据项。但即使是这么简单的逻辑，其中也还有很多可以优化的地方。</p><hr><h3 id="箭头函数和-this-关键字"><a href="#箭头函数和-this-关键字" class="headerlink" title="箭头函数和 this 关键字"></a>箭头函数和 this 关键字</h3><p>先来看一下代码中的 <code>saveItem</code> 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">saveItem: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$http.post(<span class="string">'item'</span>, <span class="keyword">this</span>.item)</span><br><span class="line">  .then(</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      vm.item.title = <span class="string">''</span>;</span><br><span class="line">      vm.item.description = <span class="string">''</span>;</span><br><span class="line">    &#125;, </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'error'</span>, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>开发中我经常很不爽的就是总是要把 <code>this</code> 关键字存起来，像上面的 <code>vm = this</code> 这个变量定义就是为了待会我们能够不受函数执行上下文影响地获取到 Vue 实例对象。假如有一种方法能够让我们彻底摆脱这种声明并且函数能够自动继承 this 关键字，岂不美哉？幸运的是，现在我们完全可以实现这个想法，因为有<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a>。</p><p>在使用箭头函数的时候，<code>this</code> 是一个常量，这意味着现在的 this 不再动态指向当前的执行上下文了，而是继承了外围作用域。这意味着我们可以把上面代码中的 promise 回调函数用一种更加简洁的方法来重写并且不需要用临时变量来存储 this 就能取到 Vue 实例对象：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">saveItem</span>: function() &#123;</span><br><span class="line"></span><br><span class="line">  // let vm = this;</span><br><span class="line"></span><br><span class="line">  this.$http.post('item', this.item)</span><br><span class="line">   .then(</span><br><span class="line"></span><br><span class="line">    //function (response) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">     this.item.title = '';</span><br><span class="line">     this.item.description = '';</span><br><span class="line">    &#125;, </span><br><span class="line"></span><br><span class="line">    //function (response) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    response =&gt; &#123;</span><br><span class="line">     console.log('error', response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看起来很不错吧！</p><hr><h3 id="滥用箭头函数"><a href="#滥用箭头函数" class="headerlink" title="滥用箭头函数"></a>滥用箭头函数</h3><p>使用箭头函数的确很酷，但是不是每个地方用它都这么好呢？有些人可能不喜欢每次都声明一个 <code>function() {}</code> 所以把它们都用箭头函数的 <code>() =&gt; {}</code> 来简写。所以刚刚的 <code>saveItem()</code> 方法还可以改写成这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">methods</span>: &#123;</span><br><span class="line">  <span class="attribute">saveItem</span>: () =&gt; &#123;</span><br><span class="line">    this.$http.<span class="built_in">post</span>(<span class="string">'item'</span>, this.item)</span><br><span class="line">      .<span class="built_in">then</span>(</span><br><span class="line">        // callbacks in here</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会觉得这样改写后简直完美，整个代码都变得特别简洁，但是这样你将会踩到一个坑。</p><p>现在 <code>saveItem()</code> 方法里面的 <code>this</code> 指向的是 <code>window</code> 而不是我们希望的 Vue 实例对象（因为是继承外围作用域的this），当我们想要在给函数传递 <code>this.item</code> 整个参数的时候，你会发现它获取的是 <code>window.item</code>。</p><hr><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions" target="_blank" rel="noopener">ES6</a> 约定了一种新的函数定义方式，可以直接把函数名当成函数的声明，像下面这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// with ES6 method definitions, this becomes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo() &#123;&#125;,</span><br><span class="line">  bar() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>所以我们可以用这种方法来简写我们的 <code>saveItem()</code> 方法，同时也不会出现刚刚箭头函数带来的 this 继承的问题。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">methods: &#123;</span><br><span class="line">  saveItem() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$http.post(<span class="string">'item'</span>, <span class="keyword">this</span>.item)</span><br><span class="line">      .then(</span><br><span class="line">        <span class="comment">// callbacks in here</span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>如果你觉得还不够简洁的话，可以按照这个方法改写所有 Vue 实例对象里面的顶级方法（<code>data</code> 和 <code>created</code> 这些）</p><hr><h3 id="data-相关"><a href="#data-相关" class="headerlink" title="data 相关"></a>data 相关</h3><p>在我们的代码里，我们的 <code>data</code> 是一个对象字面量。如果你熟悉 Vue 的话你会发现我们在真正开发的时候会把 <code>data</code> 这个对象当做闭包 return 回来。官方文档和<a href="http://codebyjeff.com/blog/2016/11/vue-js-simple-tuts-component" target="_blank" rel="noopener">这篇博客</a>有解释为什么这样做（译者注：这里要返回闭包是为了保证组件内部的状态独立，避免多个相同组件共用一个 data）。</p><p>我们刚刚了解到了很多优化的点，还知道了箭头函数里面的 this 是一个常量，它继承自外围作用域，除此之外，箭头函数还有一些<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">函数体定义</a>的新特性，前面的例子中我们定义函数体的时候用的是传统的块级结构方法（花括号包裹），箭头函数中我们可以使用一种更加简洁的代码结构来定义函数体，看下面的两段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;<span class="keyword">return</span> a+b;&#125;  <span class="comment">// 传统块级结构，必须要有 return</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;           <span class="comment">// 简单结构，不用声明 return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">a,b</span>) =&gt;</span> (&#123;<span class="attr">sum</span>: a+b&#125;);  <span class="comment">// 如果要返回一个对象字面量，则必须用括号包裹</span></span><br></pre></td></tr></table></figure><p>当你的函数只返回一个值的时候，可以直接把值写上，不再需要以往的花括号和 <code>return</code> 了，但如果需要返回一个对象字面量的话，就必须把你要返回的对象用括号包裹起来（译者注：花括号是运算符，声明这是一个计算值，否则会把对象字面量的花括号认为是箭头函数的函数体声明）。</p><p>我很喜欢这个小改动，另外你也可以使用 ES6 的函数定义方法来写</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// method definition style</span></span><br><span class="line"><span class="params">...</span></span><br><span class="line"><span class="built_in">data</span>() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    item: &#123;</span><br><span class="line">      title: <span class="string">''</span>,</span><br><span class="line">      description: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="params">...</span></span><br></pre></td></tr></table></figure><hr><h3 id="Vue-ES6-规范"><a href="#Vue-ES6-规范" class="headerlink" title="Vue ES6 规范"></a>Vue ES6 规范</h3><p>踩过那么多坑之后，我总结出了以下几条 Vue 模块定义规范：</p><ol><li><p>使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions" target="_blank" rel="noopener">ES6 方法定义规范</a>来定义所有顶层方法</p></li><li><p>使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a>定义所有在顶层方法里面的回调函数</p></li><li><p>使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Function_body" target="_blank" rel="noopener">“简单结构”</a>来定义 <code>data</code> 的函数体</p></li></ol><p>希望这些规范能够让你的 Vue 模块代码和组件更加吸引人并且更加可读，Thx！</p><hr><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p><a href="https://rainsoft.io/when-not-to-use-arrow-functions-in-javascript/" target="_blank" rel="noopener">https://rainsoft.io/when-not-to-use-arrow-functions-in-javascript/</a></p><hr><p><em>Originally published at</em> <a href="https://gist.github.com/JacobBennett/7b32b4914311c0ac0f28a1fdc411b9a7" target="_blank" rel="noopener"><em>gist.github.com</em></a>_._</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://dotdev.co/clean-up-your-vue-modules-with-es6-arrow-functions-2ef65e348d41#.vkndfgci3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dotdev.co/clean-up-your-vue-modules-with-es6-arrow-functions-2ef65e348d41#.vkndfgci3&lt;/a&gt;&lt;br&gt;众成翻译地址：&lt;a href=&quot;http://www.zcfy.cc/article/clean-up-your-vue-modules-with-es6-arrow-functions-dotdev-1872.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.zcfy.cc/article/clean-up-your-vue-modules-with-es6-arrow-functions-dotdev-1872.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在重构一个用 Vue1.0 写的项目，我通过使用 ES6 的箭头函数来让代码在不升级 Vue2.0 的情况下变得更加简洁和统一。在这个过程中我也遇到了很多坑，所以想借此机会分享一下我从中学到的东西以及总结出来的一些规范，这些规范以后都将会落实到我的 Vue 项目中。&lt;/p&gt;
    
    </summary>
    
      <category term="外文翻译" scheme="http://shijianwen.github.io/categories/%E5%A4%96%E6%96%87%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo 博客利用 github 分支同步源文件</title>
    <link href="http://shijianwen.github.io/2016/12/01/hexo-sync/"/>
    <id>http://shijianwen.github.io/2016/12/01/hexo-sync/</id>
    <published>2016-12-01T10:29:10.000Z</published>
    <updated>2018-04-04T02:48:19.309Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;hexo 是一个优秀的静态博客工具，唯一的不足就是源文件无法同步，让人几乎只能在一台电脑上写博客，为了解决这个问题，我们可以使用 Github 来管理我们的 hexo 源文件，具体思路就是：在我们博客的远程仓库中新建一个分支，用这个分支来存储博客的源文件，这样我们每次在更新博客并部署之后可以顺手多执行两条命令将源文件同步到远程分支中去，不需要做任何环境切换的操作，还可以将部署和同步操作写成一个命令脚本，自动执行以上命令。建立同步的过程很简单：</p><a id="more"></a><h4 id="初始化版本库-amp-建立仓库关联（已与远程仓库关联的可忽略这一步）"><a href="#初始化版本库-amp-建立仓库关联（已与远程仓库关联的可忽略这一步）" class="headerlink" title="初始化版本库&amp;建立仓库关联（已与远程仓库关联的可忽略这一步）"></a>初始化版本库&amp;建立仓库关联（已与远程仓库关联的可忽略这一步）</h4><p>&emsp;&emsp;一般根据 hexo 教程一步步建立起来的博客都没有跟自己的远程仓库建立关联，查看是否关联的方法是输入 <code>git remote</code> 看是否有关联的远程仓库：<br><img src="/images/1480585048966.png" alt="Alt text"><br>可以看到我这里有一个名叫 origin 的仓库与我本地的文件夹关联，如果当前还没有关联，先用 <code>git init</code> 命令将你的本地文件夹初始化成一个版本库，然后使用 <code>git remote add origin 你的github仓库地址</code> 命令来建立与远程仓库的关联，这里的 origin 是你定义的远程仓库在本地的名字，你也可以叫别的，一般命名成 origin，这样就建立好了关联了，使用刚刚的 <code>git remote</code> 命令检测会看到你关联的仓库。</p><h4 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h4><p>&emsp;&emsp;像正常提交文件那样使用 <code>git add</code> 、 <code>git commit</code>  和 <code>git push</code> 命令提交文件，但这里在 push 的时候要注意新建一个分支去存你要提交的源文件，具体命令是 <code>git push -u origin HEAD:分支名</code>，这里的分支名自己取，HEAD 是版本库的头指针的意思，代表本地版本库里面的最新版本，origin 是刚刚你自己添加远程关联时候的名字，如果你的不是叫 origin 就写成自己定义的名字， -u 参数是为了建立本地分支与远程分支的关联，以后 push 的时候直接输入 <code>git push</code> 就可以了，所以这整个命令的意思就是：<code>把本地最新版本的代码提交到远程仓库的某个分支上去，如果远程仓库还没有这个分支，就在远程仓库里新建一个分支，然后将它跟本地当前分支关联起来</code>。提交之后你就会发现自己的 github 仓库多了一条分支，就是你刚刚提交的那个分支。<br>&emsp;&emsp;至于这里为什么不先在 github 上面手动建立分支，然后再在本地建立关联，是因为如果是远程手动建立分支会自动以 master 分支为模板建立一份一模一样的文件，而我们仓库里面 master 分支存的都是经过 hexo 编译的文件，跟源文件完全不一样，新建这样一个分支之后还要手动把里面的文件删掉，另一个原因是如果在远程手动建分支，你在本地还得手动用 <code>git fetch origin</code> 拉取远程分支的更新，然后再手动建立与分支的关联，比较麻烦，当然如果你是刚开始部署 hexo，github 仓库里面还一点东西都没有的话这些问题都不存在，那就随意。</p><h4 id="设置默认分支"><a href="#设置默认分支" class="headerlink" title="设置默认分支"></a>设置默认分支</h4><p>&emsp;&emsp;最后我们需要把你新建的那个分支设置成 github 的默认分支，这样做的原因是为了你以后在别的机器上拉取代码的时候能够直接拉取源文件，不用再指定分支。<br><img src="/images/1480586433661.png" alt="Alt text"><br>在这里选择好默认分支之后，update就行了。现在你就可以使用 github 来同步自己的 hexo 博客源文件啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;hexo 是一个优秀的静态博客工具，唯一的不足就是源文件无法同步，让人几乎只能在一台电脑上写博客，为了解决这个问题，我们可以使用 Github 来管理我们的 hexo 源文件，具体思路就是：在我们博客的远程仓库中新建一个分支，用这个分支来存储博客的源文件，这样我们每次在更新博客并部署之后可以顺手多执行两条命令将源文件同步到远程分支中去，不需要做任何环境切换的操作，还可以将部署和同步操作写成一个命令脚本，自动执行以上命令。建立同步的过程很简单：&lt;/p&gt;
    
    </summary>
    
      <category term="博客日志" scheme="http://shijianwen.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 浏览器文本垂直居中问题</title>
    <link href="http://shijianwen.github.io/2016/11/29/android-vertical-align/"/>
    <id>http://shijianwen.github.io/2016/11/29/android-vertical-align/</id>
    <published>2016-11-29T07:04:11.000Z</published>
    <updated>2018-04-04T02:48:19.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在开发中，我们常使用 line-height 属性来实现文本的垂直居中，但是在安卓浏览器渲染中有一个常见的问题，就是对于小于12px的字体使用 line-height 属性进行垂直居中的时候，渲染出来的效果并不是文字垂直居中，而是会偏上一些。举两个代码示例如下：</p><p><strong><em> 1. 大于12px </em></strong></p><p>html<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>testtesttest<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>显示效果</p><p><img src="/images/1480324637887.png" alt=""></p><p><strong><em> 2. 小于12px </em></strong></p><p>html<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>testtesttest<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>显示效果</p><p><img src="/images/1480324744155.png" alt=""></p><p>可以看到当 font-size 小于 12px 的时候，利用 line-height 属性进行垂直居中布局明显是偏上的，这里为了避免由于 font-size 是奇数带来的偏差，特意把 font-size 都设置成了偶数</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>起初对这个问题有过两种推测，一是认为是字体的问题，或者是浏览器渲染的问题。但后面发现即使换了字体只要 font-size 还是小于 12px 一样会出现这个问题。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>看起来问题的根源在于字体大小小于 12px，所以解决问题可以从这个方向入手，要么改变字体大小，要么换个方式让它垂直居中。</p><p><strong><em> 1. 改变字体大小 </em></strong><br>最直接的方法就是改变字体大小让它大于 12px 能够正常居中，如果页面对字体大小要求比较严格的话，可以先将原来包括 font-size 在内的属性放大两倍，再用 scale 缩小一倍，这样测试之后也是可行的：</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>testtesttesttesttest<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.5);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">0%</span> <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/1480389681672.png" alt=""></p><p>但不知道为什么，用这种方法之后我总是感觉文字没有绝对地居中，好像是有一点细微的偏下，不知道什么原因，不是 line-height 就是我的眼睛有问题。。。</p><p><strong><em> 2. table布局 </em></strong><br>在元素外再包一层，使用表格布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>testtesttesttesttest<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: gray;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/1480400251642.png" alt=""></p><p>利用 table 布局能够比较好地实现文本垂直居中，缺点是要在外面多包一层容器。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在查阅了很多资料之后，虽然能够解决这个问题，但导致问题的具体原因还是不够明显，只知道是安卓端浏览器的渲染问题，再往深一点的原因就有点鞭长莫及了，若有同行研究过这个问题，还望不吝赐教哈~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;在开发中，我们常使用 line-height 属性来实现文本的垂直居中，但是在安卓浏览器渲染中有一个常见的问题，就是对于小于12px的字体使用 line-height 属性进行垂直居中的时候，渲染出来的效果并不是文字垂直居中，而是会偏上一些。举两个代码示例如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; 1. 大于12px &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;html&lt;br&gt;&lt;figure class=&quot;highlight vbscript-html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;testtesttest&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;css&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;span&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: inline-block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: gray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;16px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;12px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web 开发" scheme="http://shijianwen.github.io/categories/Web-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="bug异闻录" scheme="http://shijianwen.github.io/tags/bug%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 启动服务报 getaddrinfo ENOTFOUND</title>
    <link href="http://shijianwen.github.io/2016/11/21/node-getaddrinfo-error/"/>
    <id>http://shijianwen.github.io/2016/11/21/node-getaddrinfo-error/</id>
    <published>2016-11-21T08:14:10.000Z</published>
    <updated>2018-04-04T02:48:19.311Z</updated>
    
    <content type="html"><![CDATA[<p>在启动 node 服务后一直报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">events.js:72</span><br><span class="line">    throw er; // Unhandled <span class="string">'error'</span> event</span><br><span class="line">          ^</span><br><span class="line">Error: getaddrinfo ENOTFOUND</span><br><span class="line">    at errnoException (dns.js:37:11)</span><br><span class="line">    at Object.onanswer [as oncomplete] (dns.js:124:16)</span><br></pre></td></tr></table></figure><p>造成这个错误的原因是本地的代理软件修改了host，让系统在 dns 解析的时候找不到 <code>localhost</code> 的地址，解决办法就是重新给系统加上host如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在启动 node 服务后一直报错：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="node.js" scheme="http://shijianwen.github.io/categories/node-js/"/>
    
    
      <category term="bug异闻录" scheme="http://shijianwen.github.io/tags/bug%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo 博客 next 主题 js 加载 404 问题</title>
    <link href="http://shijianwen.github.io/2016/11/21/assets-404/"/>
    <id>http://shijianwen.github.io/2016/11/21/assets-404/</id>
    <published>2016-11-20T16:48:10.000Z</published>
    <updated>2018-04-04T02:48:19.308Z</updated>
    
    <content type="html"><![CDATA[<p>这几天想要更新博客，打开之后发现所有 js 都加载失败了，查阅之后发现是近期 github page 升级造成了，自动屏蔽了 vendors 文件夹，next 原作者回复：<br><img src="/images/1479660158479.png" alt="Alt text"></p><p>问题有两个解决办法，一个是升级 next 的版本，但是新版本的一些配置可能不兼容了，所以谨慎升级，另一个方法是将 next 主题文件夹下的 <code>source/vendors</code> 文件夹重命名，然后将所有引用到了 vendors 的地方也一并重命名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天想要更新博客，打开之后发现所有 js 都加载失败了，查阅之后发现是近期 github page 升级造成了，自动屏蔽了 vendors 文件夹，next 原作者回复：&lt;br&gt;&lt;img src=&quot;/images/1479660158479.png&quot; alt=&quot;Alt t
      
    
    </summary>
    
      <category term="博客日志" scheme="http://shijianwen.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="bug异闻录" scheme="http://shijianwen.github.io/tags/bug%E5%BC%82%E9%97%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 React、Flux 与 Redux</title>
    <link href="http://shijianwen.github.io/2016/06/30/react-flux-redux/"/>
    <id>http://shijianwen.github.io/2016/06/30/react-flux-redux/</id>
    <published>2016-06-30T11:02:10.000Z</published>
    <updated>2018-04-04T02:48:19.311Z</updated>
    
    <content type="html"><![CDATA[<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>React 是一个 View 层的框架，用来渲染视图，它主要做几件事情：</p><ul><li>组件化</li><li>利用 props 形成单向的数据流</li><li>根据 state 的变化来更新 view</li><li>利用虚拟 DOM 来提升渲染性能</li></ul><p><img src="http://7tszky.com1.z0.glb.clouddn.com/FgHh-hjZfigrSqf_9MZhjgmknC5N" alt=""></p><a id="more"></a><p>前面说到 React 能够根据 state 的变化来更新 view，一般来说引起 state 变化的动作除了来自外部（如服务器），大部分都来自于页面上的用户活动，那页面上的用户活动怎样对 state 产生作用呢？React 中每个组件都有 setState 方法用于改变组件当前的 state，所以可以把更改 state 的逻辑写在各自的组件里，但这样做的问题在于，当项目逻辑变得越来越复杂的时候，将很难理清 state 跟 view 之间的对应关系（一个 state 的变化可能引起多个 view 的变化，一个 view 上面触发的事件可能引起多个 state 的改变）。我们需要对所有引起 state 变化的情况进行统一管理，于是就有了 Flux。 </p><h3 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h3><p>Flux 是一种应用架构，或者说是一种思想，它跟 React 本身没什么关系，它可以用在 React 上，也可以用在别的框架上。前面说到 Flux 在 React 中主要用来统一管理引起 state 变化的情况。Flux 维护着一个或者多个叫做 <code>Store</code> 的变量，就像 MVC 里面的 Model，里面存放着应用用到的所有数据，当一个事件触发时 ，Flux 对事件进行处理，对 Store 进行更新，当 Store 发生变化时，通常是由应用的根组件（也叫 controller view）去获取最新的 store，然后更新 state，之后利用 React 单向数据流的特点一层层将新的 state 向下传递实现 view 的更新。这里的 controller view 可以有多个也可以不是根组件，但是这样数据流维护起来就比较麻烦。</p><p>Flux 的思维模型如下：<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FonZpI0A0bUAcv1jwAhJdALdqDOj" alt=""></p><p>Flux 主要包括四个部分，<code>Dispatcher</code>、<code>Store</code>、<code>View</code>、<code>Action</code>，其中 Dispatcher 是 Flux 的核心枢纽，它相当于是一个事件分发器，将那些分散在各个组件里面的逻辑代码收集起来，统一在 Dispatcher 中进行处理。完整的 Flux 处理流程是这样的：用户通过与 view 交互或者外部产生一个 Action，Dispatcher 接收到 Action 并执行那些已经注册的回调，向所有 Store 分发 Action。通过注册的回调，Store 响应那些与他们所保存的状态有关的 Action。然后 Store 会触发一个 change 事件，来提醒 controller-views 数据已经发生了改变。Controller-views 监听这些事件并重新从 Store 中获取数据。这些 controller-views 调用他们自己的 setState() 方法，重新渲染自身以及组件树上的所有后代组件。使用 Flux 有个好处就是我只需要用 action 对象向 Dispatcher 描述当前的事件就可以执行对应的逻辑，因为 Dispatcher 是所有 Action 的处理中心，即使没有对应的事件发生，我们也可以“伪造”一个出来，非常利于测试。</p><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>Redux 的作用跟 Flux 是一样的，它可以看作是 Flux 的一种实现，但是又有点不同，具体的不同总结起来就是：</p><p><strong><em> 1. Redux 只有一个 store </em></strong></p><p>Flux 里面会有多个 store 存储应用数据，并在 store 里面执行更新逻辑，当 store 变化的时候再通知 controller-view 更新自己的数据，Redux 将各个 store 整合成一个完整的 store，并且可以根据这个 store 推导出应用完整的 state。同时 Redux 中更新的逻辑也不在 store 中执行而是放在 reducer 中。</p><p><strong><em> 2. 没有 Dispatcher </em></strong></p><p>Redux 中没有 Dispatcher 的概念，它使用 reducer 来进行事件的处理，reducer 是一个纯函数，这个函数被表述为 <code>(previousState, action) =&gt; newState</code>，它根据应用的状态和当前的 action 推导出新的 state。Redux 中有多个 reducer，每个 reducer 负责维护应用整体 state 树中的某一部分，多个 reducer 可以通过 <code>combineReducers</code> 方法合成一个根reducer，这个根reducer负责维护完整的 state，当一个 action 被发出，store 会调用 dispatch 方法向某个特定的 reducer 传递该 action，reducer 收到 action 之后执行对应的更新逻辑然后返回一个新的 state，state 的更新最终会传递到根reducer处，返回一个全新的完整的 state，然后传递给 view。</p><p>在我看来，Redux 和 Flux 之间最大的区别就是对 store/reducer 的抽象，Flux 中 store 是各自为战的，每个 store 只对对应的 controller-view 负责，每次更新都只通知对应的 controller-view；而 Redux 中各子 reducer 都是由根reducer统一管理的，每个子reducer的变化都要经过根reducer的整合。用图表示的话可以像这样：</p><p>Flux 中的 store 是这样的：<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FulidOFq7yfm-fyPHy9qm50JDu-K" alt=""></p><p>Redux 中的 store（或者叫 reducer）是这样的：<br><img src="http://7tszky.com1.z0.glb.clouddn.com/FqwrgoH93cl8a5f3oFc0XZL7waBQ" alt=""></p><p>ps：刚接触 React，很多地方了解地不是特别深入，如有错漏，欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h3&gt;&lt;p&gt;React 是一个 View 层的框架，用来渲染视图，它主要做几件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件化&lt;/li&gt;
&lt;li&gt;利用 props 形成单向的数据流&lt;/li&gt;
&lt;li&gt;根据 state 的变化来更新 view&lt;/li&gt;
&lt;li&gt;利用虚拟 DOM 来提升渲染性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7tszky.com1.z0.glb.clouddn.com/FgHh-hjZfigrSqf_9MZhjgmknC5N&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ReactJS" scheme="http://shijianwen.github.io/categories/ReactJS/"/>
    
    
  </entry>
  
  <entry>
    <title>许愿墙总结文档</title>
    <link href="http://shijianwen.github.io/2016/03/01/%E8%AE%B8%E6%84%BF%E5%A2%99%E6%80%BB%E7%BB%93%E6%96%87%E6%A1%A3/"/>
    <id>http://shijianwen.github.io/2016/03/01/许愿墙总结文档/</id>
    <published>2016-03-01T15:10:10.000Z</published>
    <updated>2018-04-04T02:48:19.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h3 id="前端："><a href="#前端：" class="headerlink" title="前端："></a>前端：</h3><p><strong><em>Angular</em></strong><br>优点：声明式 UI、完善的指令系统、双向数据绑定、模块化、依赖注入、完整的 MVC 以及可以自定义的指令<br>缺点：自带的路由模块功能比较弱，需要依靠第三方的 uiRouter，整体较笨重，不适合做交互频繁的网页，对于一个页面显示数据量较大的网页性能优化是一个问题，还有就是对 SEO 不友好。<br><a id="more"></a></p><h3 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h3><p><strong><em>Node.js</em></strong><br>优点：事件驱动以及非阻塞的异步 IO 使它能够很好地应对高并发场景，适合做 IO 密集型的应用<br>缺点：JS 的单线程限制使其很难利用服务器的多核资源，可靠性较低，一旦挂了就整个服务都崩溃了</p><h3 id="数据库："><a href="#数据库：" class="headerlink" title="数据库："></a>数据库：</h3><p><strong><em>MongoDB</em></strong><br>优点：文档结构的存储方式，能够更好地管理数据，查询速度也更快，也能够减少磁盘 IO；JSON 风格的语法易于理解和掌握<br>缺点：不支持事务操作，占用空间较大（为避免产生磁盘碎片），删除记录后并不释放空间（为了避免大规模的数据移动）</p><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><p>静态资源存储使用<strong><em>七牛云存储</em></strong><br>实时消息的推送和实时消息传递使用 <strong><em>socket.io</em></strong><br>后端使用 <strong><em>Express</em></strong> 框架<br>开发环境配置使用 <strong><em>Gulp</em></strong><br>部署环境使用 <strong><em>BAE</em></strong></p><h2 id="技术难点"><a href="#技术难点" class="headerlink" title="技术难点"></a>技术难点</h2><h3 id="1-如何把图片上传到七牛的过程跟微信-SDK-中的上传图片过程连接起来"><a href="#1-如何把图片上传到七牛的过程跟微信-SDK-中的上传图片过程连接起来" class="headerlink" title="1. 如何把图片上传到七牛的过程跟微信 SDK 中的上传图片过程连接起来"></a>1. 如何把图片上传到七牛的过程跟微信 SDK 中的上传图片过程连接起来</h3><p><strong><em>问题背景</em></strong><br>因为要把愿望的图片保存在七牛的服务器上，虽然七牛有自己的上传组件，但是那个上传组件点击后出现的是选择所有类型文件的界面，我希望上传图片的时候是那种选择相册或拍照的方式，也就是微信 SDK 提供的选择图片接口那样的功能，此时的难点在于怎样把通过微信 SDK 选择到的图片传给七牛。<br><strong><em>解决方案</em></strong><br>利用了微信 SDK 提供的上传图片接口和七牛的 fetch 接口，当微信选择了图片之后就把图片上传到微信服务器上，上传成功后会返回一个图片的下载链接，然后再用七牛的 fetch 接口向这个下载链接发送请求，获取到图片文件，然后存入七牛空间。</p><h3 id="2-微信无故循环报-access-token-40001-错误"><a href="#2-微信无故循环报-access-token-40001-错误" class="headerlink" title="2. 微信无故循环报 access_token 40001 错误"></a>2. 微信无故循环报 access_token 40001 错误</h3><p><strong><em>问题背景</em></strong><br>许愿墙最后一天的时候男女功能反转，会出现一波用户请求的高峰，在 access_token 过期后，有多个用户同时请求了新的 access_token，access_token 在传输回服务器的过程中由于网络原因导致 access_token 返回的先后顺序跟请求的先后顺序不同，造成服务器缓存的是一个微信服务器不承认的 access_token（因为新请求的 access_token 会把前面的 access_token 覆盖）。<br><strong><em>解决方案</em></strong><br>增加错误处理，出现问题后清空 access_token 的缓存，然后重新请求新的 access_token。</p><h3 id="3-BAE-多个执行单元导致-soket-io-报错"><a href="#3-BAE-多个执行单元导致-soket-io-报错" class="headerlink" title="3. BAE 多个执行单元导致 soket.io 报错"></a>3. BAE 多个执行单元导致 soket.io 报错</h3><p><strong><em>问题背景</em></strong><br>这个问题相当于开了多个 node 进程后 socket.io 的消息分配问题，由于有多条进程在运行后台，当有实时消息请求但此时通信双方请求的是不同进程的时候会导致 socket.io 报错。<br><strong><em>解决方案</em></strong><br>为了解决这个问题，我使用 redis 做了一个事件订阅/发布模型，多个服务器进程订阅发布进程，然后由发布进程统一处理所有的实时请求。</p><h2 id="不足之处"><a href="#不足之处" class="headerlink" title="不足之处"></a>不足之处</h2><ol><li>代码的优化不够，对 Angular 和 Node 掌握不够导致很多优化技巧没有用上；</li><li>前期的规划不足导致开发中经常要对之前的代码进行重构；</li><li>权限控制做得不好，没有花时间在这方面；</li><li>开发节奏不够好，难以掌控进度。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;技术选型&quot;&gt;&lt;a href=&quot;#技术选型&quot; class=&quot;headerlink&quot; title=&quot;技术选型&quot;&gt;&lt;/a&gt;技术选型&lt;/h2&gt;&lt;h3 id=&quot;前端：&quot;&gt;&lt;a href=&quot;#前端：&quot; class=&quot;headerlink&quot; title=&quot;前端：&quot;&gt;&lt;/a&gt;前端：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Angular&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;优点：声明式 UI、完善的指令系统、双向数据绑定、模块化、依赖注入、完整的 MVC 以及可以自定义的指令&lt;br&gt;缺点：自带的路由模块功能比较弱，需要依靠第三方的 uiRouter，整体较笨重，不适合做交互频繁的网页，对于一个页面显示数据量较大的网页性能优化是一个问题，还有就是对 SEO 不友好。&lt;br&gt;
    
    </summary>
    
      <category term="Web 开发" scheme="http://shijianwen.github.io/categories/Web-%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
</feed>
