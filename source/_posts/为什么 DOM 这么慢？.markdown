title: 为什么 DOM 这么慢？
date: 2015-11-16 10:47:11
categories: JavaScript

---

###一、DOM 的本质
在浏览器里， DOM 只是一些操作 HTML 或者 XML 元素的接口的集合，为了让别的语言也能通过这些接口来操作文档，浏览器的 DOM 部分和 ECMAScript 的部分是分开放的，也就是说，DOM 跟 ECMAScript 是独立的两个部分，要想操作 HTML，就得使用 DOM 提供的接口来连接 HTML 文档，所以每次使用 ECMAScript 进行 DOM 操作的时候都需要经过一个连接接口进行调用的过程，这个过程有着很大的性能损耗，操作 DOM 的次数越多，性能的影响就越大，从而表现出 DOM 操作特别慢的现象。
<!-- more -->
###二、重绘与重排
当浏览器下载完页面后，便开始解析页面并生成两个内部数据结构：DOM 树和渲染树，DOM 树用来表示页面的结构，渲染树用来表示 DOM 节点如何显示，一旦这两个数据结构构建完成，浏览器就开始绘制页面元素。DOM 树里每一个节点在渲染树里都至少有一个节点与之对应（隐藏的节点在渲染树立没有对应的节点），在渲染树里，它把所有节点都看作是一个有内外边距和位置属性的盒子，当节点的几何属性（如宽高，位置）被更改之后，浏览器会重新计算这些更改的属性，然后使渲染树中对应的部分失效，并且重新构造渲染树，这个过程被称为“重排”。完成重排过程后，浏览器会重新绘制那些受影响的部分，这个过程称为“重绘”。有些 DOM 操作并不会导致重排，比如更改背景颜色，这种操作只会导致重绘。重排与重绘往往不是发生在单独一个元素上，在文档流里，一个元素的几何属性改变有可能会导致整个页面的重排或者重绘操作，比如在网页 body 最上方插入一个子元素，这时其后的所有被这个元素影响到的子元素都要跟着重新计算重新渲染。重排跟重绘都是代价昂贵的操作，这也是 DOM 表现出特别慢的一个重要原因。
###优化建议
我们知道 DOM 速度特别慢这个事实后，在开发中我们就需要尽量地减少 DOM 操作，减少 DOM 操作的根本其实就是减少重绘或者重排的次数。当我们需要批量操作 DOM 的时候，可以先把目标节点隐藏起来然后进行操作，操作完成之后再把节点还原，也可以利用 document.createDocumentFragment 方法先生成一个完整的文档片段，完成之后再一次性插入 HTML 文档中，这样就避免了浏览器在每一次 DOM 操作后都进行一次重排和重绘操作。同样的，把目标节点脱离文档流也能达到类似的效果，有些时候一些网页特效并不允许我们把它隐藏起来执行，比如 js 动画，但是 js 动画确实一个及其耗费性能的事情，每一帧的变换都需要经过重排或者重绘操作，无形之中给网页带来了极大的性能开销。利用脱离文档流的方式可以使动画执行时只影响自身的重绘与重排，而不会影响其他元素，常见的脱离文档流方式就是绝对定位。利用绝对定位，使元素脱离文档流，等执行完动画之后再插入文档流，这时候进行的重排重绘操作只发生在执行动画的元素本身，从而提升了性能。




